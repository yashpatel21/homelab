---
# =============================================================================
# DEPLOY NEWT TUNNELING CLIENT PLAYBOOK
# =============================================================================
# 
# This playbook deploys Newt, the client component for Pangolin secure tunneling.
# Newt establishes encrypted tunnels to the Pangolin server without requiring
# port forwarding or direct internet exposure.
#
# Prerequisites:
# - Pangolin server configured and operational
# - Newt credentials (ID and secret) configured in vault.yml
# - Docker running with homelab network created
#
# What this playbook does:
# 1. Creates Newt service directories
# 2. Deploys Newt Docker Compose stack
# 3. Configures tunnel connection to Pangolin server
# 4. Verifies tunnel service deployment
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing tunnel configurations
# - Handles credential updates gracefully
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-newt.yml --ask-vault-pass
#
# Tags:
# --tags setup    : Only create directories and configuration
# --tags deploy   : Only deploy/update the service
# --tags verify   : Only run verification checks
# --tags update   : Force update and restart service
# =============================================================================

- name: Deploy Newt Tunneling Client
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "newt"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    
  pre_tasks:
    - name: "üîç Verify Prerequisites"
      block:
        - name: Verify required vault variables exist
          fail:
            msg: |
              ‚ùå ERROR: Required vault variables missing.
              
              Please ensure these variables are configured in vault.yml:
              - vault_pangolin_endpoint
              - vault_newt_id
              - vault_newt_secret
              
              Example configuration:
              vault_pangolin_endpoint: "https://pangolin.radiowaves.app"
              vault_newt_id: "your-newt-id"
              vault_newt_secret: "your-newt-secret"
          when: >
            vault_pangolin_endpoint is not defined or
            vault_newt_id is not defined or
            vault_newt_secret is not defined

        - name: Display prerequisites status
          debug:
            msg: |
              ‚úÖ Prerequisites Check Passed
              
              üìã Configuration Status:
              - Pangolin Endpoint: {{ vault_pangolin_endpoint }}
              - Newt ID: {{ vault_newt_id[:8] }}...
              - base_domain: {{ base_domain }}
              
              üöÄ Ready to proceed with Newt deployment

  tasks:
    # =============================================================================
    # SETUP: Directory and Configuration Creation
    # =============================================================================
    
    - name: "Setup - Create Newt directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/config"
        - "{{ data_directory }}/{{ service_name }}/logs"
      tags: 
        - setup
        - always

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "newt-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display compose file location"
      debug:
        msg: "Docker Compose file created at: {{ compose_file }}"
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start Newt service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for Newt service to be ready"
      pause:
        seconds: 10
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Check Newt logs for connection status"
      command: "docker logs newt --tail 20"
      register: newt_logs
      changed_when: false
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display Newt connection status"
      debug:
        msg: |
          üìã NEWT CONNECTION STATUS:
          {{ newt_logs.stdout_lines | join('\n') }}
          
          üí° Check logs for successful tunnel establishment to Pangolin server
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Deployment results"
      debug:
        msg: |
          ============================================================
          üöÄ NEWT TUNNELING CLIENT DEPLOYMENT SUMMARY
          ============================================================
          
          üìÅ Service Directory: {{ data_directory }}/{{ service_name }}
          üìã Compose File: {{ compose_file }}
          üîó Pangolin Endpoint: {{ vault_pangolin_endpoint }}
          
          üåê Tunnel Configuration:
          ‚Ä¢ Newt ID: {{ vault_newt_id[:8] }}...
          ‚Ä¢ Connection Status: Check logs above
          
          üìä Service Status:
          ‚Ä¢ Container: {{ 'Running' if running_containers.stdout else 'Starting' }}
          ‚Ä¢ Tunnel: Check logs for connection establishment
          
          üîß Service Management Commands:
          ‚Ä¢ View logs: docker compose -f {{ compose_file }} logs -f
          ‚Ä¢ Restart: docker compose -f {{ compose_file }} restart
          ‚Ä¢ Stop: docker compose -f {{ compose_file }} down
          ‚Ä¢ Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          üìù Next Steps:
          1. Monitor Newt logs for successful Pangolin connection
          2. Verify tunnel establishment: docker logs newt
          3. Test external access through Pangolin tunnels
          4. Configure Pangolin routing for homelab services
          
          ‚ö†Ô∏è  Tunnel Connection Notes:
          ‚Ä¢ Initial tunnel establishment may take 1-2 minutes
          ‚Ä¢ Check Pangolin server status if connection fails
          ‚Ä¢ Verify Newt credentials in vault.yml if authentication fails
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          üí° USEFUL COMMANDS:
          
          # Check Newt status
          docker compose -f {{ compose_file }} ps
          
          # View tunnel logs
          docker compose -f {{ compose_file }} logs -f newt
          
          # Check connection status
          docker logs newt --tail 50
          
          # Restart tunnel service
          docker compose -f {{ compose_file }} restart
          
          # Test tunnel connectivity
          # (Commands depend on Pangolin server configuration)
          
          # Update Newt client
          docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
      tags: 
        - always 