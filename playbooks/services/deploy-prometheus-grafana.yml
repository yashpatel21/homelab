---
# =============================================================================
# PHASE 3: Supporting Services - Prometheus + Grafana Monitoring Stack Deployment
# =============================================================================
# 
# This playbook deploys a comprehensive monitoring stack with Prometheus,
# Grafana, and various exporters for infrastructure and service monitoring.
#
# Prerequisites:
# - Phase 1 infrastructure setup completed
# - Phase 2 core services deployed (Traefik, NTFY, AdGuard Home)
# - DNS overrides configured in OPNsense for grafana.radiowaves.app and prometheus.radiowaves.app
# - Docker installed and homelab network created
# - AdGuard Home admin credentials available
# - OPNsense Node Exporter plugin installed (manual)
#
# What this playbook does:
# 1. Creates monitoring stack configuration directories
# 2. Generates Prometheus configuration from template
# 3. Deploys complete monitoring Docker Compose stack with Traefik integration
# 4. Configures persistent data volumes for Prometheus and Grafana
# 5. Verifies all monitoring services and exporters
#
# Monitoring Components:
# - Prometheus: Metrics collection and storage
# - Grafana: Visualization dashboards
# - Node Exporter: Ubuntu VM system metrics
# - cAdvisor: Docker container metrics
# - AdGuard Exporter: DNS analytics and statistics
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing Prometheus and Grafana data
# - Handles configuration updates gracefully
# - Works with existing deployments
#
# Manual Configuration Required:
# - OPNsense Node Exporter plugin installation
# - Grafana initial setup and dashboard imports
# - AdGuard Home credentials setup in vault
# - Dashboard configuration and customization
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-prometheus-grafana.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and configuration
# --tags deploy     : Only deploy/update the service stack
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart all services
# =============================================================================

- name: Deploy Prometheus + Grafana Monitoring Stack
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "prometheus-grafana"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    prometheus_config_file: "{{ data_directory }}/{{ service_name }}/prometheus/prometheus.yml"
    ssl_cert_resolver: "myresolver"
    
  tasks:
    # =============================================================================
    # SETUP: Directory and Configuration Creation
    # =============================================================================
    
    - name: "Setup - Create monitoring stack directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/prometheus"
        - "{{ data_directory }}/{{ service_name }}/prometheus/data"
        - "{{ data_directory }}/{{ service_name }}/grafana"
        - "{{ data_directory }}/{{ service_name }}/grafana/data"
        - "{{ data_directory }}/{{ service_name }}/grafana/provisioning"
        - "{{ data_directory }}/{{ service_name }}/grafana/provisioning/dashboards"
        - "{{ data_directory }}/{{ service_name }}/grafana/provisioning/datasources"
      tags: 
        - setup
        - always

    - name: "Setup - Set Prometheus data directory permissions"
      file:
        path: "{{ data_directory }}/{{ service_name }}/prometheus/data"
        owner: "65534"
        group: "65534"
        mode: '0755'
        recurse: yes
      tags: 
        - setup
        - always

    - name: "Setup - Set Grafana data directory permissions"
      file:
        path: "{{ data_directory }}/{{ service_name }}/grafana/data"
        owner: "472"
        group: "472"
        mode: '0755'
        recurse: yes
      tags: 
        - setup
        - always

    - name: "Setup - Generate Prometheus configuration from template"
      template:
        src: "prometheus-config.yml.j2"
        dest: "{{ prometheus_config_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: prometheus_config_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "prometheus-grafana-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display compose file location"
      debug:
        msg: "Docker Compose file created at: {{ compose_file }}"
      tags: 
        - setup
        - always

    # =============================================================================
    # ADGUARD HOME MONITORING USER SETUP
    # =============================================================================
    
    - name: "Setup - Check if AdGuard Home is running"
      shell: "docker ps --filter name=adguard -q"
      register: adguard_running
      changed_when: false
      failed_when: false
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Stop AdGuard Home temporarily for user configuration"
      shell: "docker stop adguard"
      when: adguard_running.stdout != ""
      register: adguard_stopped
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Generate password hash for AdGuard monitoring user"
      shell: "htpasswd -nbB {{ vault_adguard_monitoring_username }} {{ vault_adguard_monitoring_password }} | cut -d: -f2"
      register: adguard_password_hash
      no_log: true
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Check if AdGuard Home config file exists"
      stat:
        path: "{{ data_directory }}/adguard/conf/AdGuardHome.yaml"
      register: adguard_config_file
      become: true
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Read current AdGuard Home configuration"
      slurp:
        src: "{{ data_directory }}/adguard/conf/AdGuardHome.yaml"
      register: adguard_config_content
      become: true
      when: adguard_config_file.stat.exists
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Parse AdGuard Home configuration"
      set_fact:
        adguard_config_raw: "{{ adguard_config_content.content | b64decode }}"
      when: adguard_config_file.stat.exists
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Validate AdGuard Home configuration is not empty"
      set_fact:
        adguard_config_valid: "{{ adguard_config_raw | length > 10 and 'users:' in adguard_config_raw }}"
      when: 
        - adguard_config_file.stat.exists
        - adguard_config_raw is defined
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Skip monitoring user setup if config is invalid"
      debug:
        msg: "⚠️ AdGuard Home configuration appears to be empty or invalid. Skipping monitoring user setup to prevent data loss."
      when: 
        - adguard_config_file.stat.exists
        - adguard_config_valid is defined
        - not adguard_config_valid
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Parse valid AdGuard Home configuration"
      set_fact:
        adguard_config: "{{ adguard_config_raw | from_yaml }}"
      when: 
        - adguard_config_file.stat.exists
        - adguard_config_valid is defined
        - adguard_config_valid
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Check if monitoring user already exists"
      set_fact:
        monitoring_user_exists: "{{ adguard_config.users | selectattr('name', 'equalto', vault_adguard_monitoring_username) | list | length > 0 }}"
      when: 
        - adguard_config is defined
        - adguard_config.users is defined
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Add monitoring user to AdGuard Home configuration"
      block:
        - name: "Setup - Create users section if it doesn't exist"
          set_fact:
            adguard_config: "{{ adguard_config | combine({'users': []}) }}"
          when: adguard_config.users is not defined

        - name: "Setup - Add monitoring user to users list"
          set_fact:
            adguard_config: "{{ adguard_config | combine({'users': adguard_config.users + [monitoring_user_entry]}) }}"
          vars:
            monitoring_user_entry:
              name: "{{ vault_adguard_monitoring_username }}"
              password: "{{ adguard_password_hash.stdout }}"

        - name: "Setup - Write updated AdGuard Home configuration"
          copy:
            content: "{{ adguard_config | to_nice_yaml }}"
            dest: "{{ data_directory }}/adguard/conf/AdGuardHome.yaml"
            owner: root
            group: root
            mode: '0600'
            backup: yes
          become: true

        - name: "Setup - Display monitoring user creation success"
          debug:
            msg: "✅ Monitoring user '{{ vault_adguard_monitoring_username }}' added to AdGuard Home configuration"
      
      when: 
        - adguard_config is defined
        - adguard_config_valid is defined
        - adguard_config_valid
        - monitoring_user_exists is not defined or not monitoring_user_exists
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Start AdGuard Home after configuration update"
      shell: "docker start adguard"
      when: adguard_stopped is defined and adguard_stopped.changed
      tags:
        - setup
        - adguard-setup

    - name: "Setup - Wait for AdGuard Home to be ready after restart"
      uri:
        url: "https://adguard.{{ base_domain }}/"
        method: GET
        timeout: 10
        validate_certs: false
        status_code: [200, 302, 403]  # 403 is OK - means AdGuard is running but not configured
      register: adguard_wait_result
      until: adguard_wait_result.status in [200, 302, 403]
      retries: 12
      delay: 5
      when: adguard_stopped is defined and adguard_stopped.changed
      tags:
        - setup
        - adguard-setup

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing monitoring containers"
      shell: "docker ps -a | grep -E '(prometheus|grafana|cadvisor|node-exporter|adguard-exporter)' || true"
      register: existing_monitoring_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Display existing monitoring containers"
      debug:
        msg: |
          🔍 EXISTING MONITORING CONTAINERS CHECK:
          {% if existing_monitoring_containers.stdout %}
          ⚠️  Found existing monitoring containers:
          {{ existing_monitoring_containers.stdout }}
          
          💡 Note: Will be managed by Ansible if names match
          {% else %}
          ✅ No existing monitoring containers found
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        for container in prometheus grafana cadvisor node-exporter adguard-exporter; do
          if docker ps -a -q -f name=^${container}$ | grep -q .; then
            echo "Removing existing container: ${container}"
            docker stop ${container} 2>/dev/null || true
            docker rm ${container} 2>/dev/null || true
          fi
        done
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start monitoring stack"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for Prometheus to be ready"
      uri:
        url: "https://prometheus.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
        status_code: [200, 302]
      register: prometheus_wait_result
      until: prometheus_wait_result.status in [200, 302]
      retries: 12
      delay: 5
      tags: 
        - deploy
        - verify

    - name: "Deploy - Wait for Grafana to be ready"
      uri:
        url: "https://grafana.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
        status_code: [200, 302]
      register: grafana_wait_result
      until: grafana_wait_result.status in [200, 302]
      retries: 12
      delay: 5
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Test Prometheus via Traefik"
      uri:
        url: "https://prometheus.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
      register: prometheus_access_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test Grafana via Traefik"
      uri:
        url: "https://grafana.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
      register: grafana_access_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test Prometheus targets API"
      uri:
        url: "https://prometheus.{{ base_domain }}/api/v1/targets"
        method: GET
        timeout: 10
        validate_certs: false
      register: prometheus_targets_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display access test results"
      debug:
        msg: |
          📡 MONITORING STACK ACCESS TEST RESULTS:
          
          {% if prometheus_access_test is defined %}
          • Prometheus Access (HTTPS): {{ '✅ Success' if prometheus_access_test.status == 200 else '❌ Failed (' + (prometheus_access_test.status | string) + ')' }}
          {% else %}
          • Prometheus access test: ⏳ Run with --tags verify to check service accessibility
          {% endif %}
          
          {% if grafana_access_test is defined %}
          • Grafana Access (HTTPS): {{ '✅ Success' if grafana_access_test.status == 200 else '❌ Failed (' + (grafana_access_test.status | string) + ')' }}
          {% else %}
          • Grafana access test: ⏳ Run with --tags verify to check service accessibility
          {% endif %}
          
          {% if prometheus_targets_test is defined %}
          • Prometheus Targets API: {{ '✅ Available' if prometheus_targets_test.status == 200 else '❌ Not available' }}
          {% else %}
          • Prometheus targets test: ⏳ Run with --tags verify to check targets
          {% endif %}
          
          💡 Note: SSL certificates may take 1-2 minutes to generate on first access
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          📊 PROMETHEUS + GRAFANA MONITORING STACK DEPLOYMENT SUMMARY
          ============================================================
          
          📁 Service Directory: {{ data_directory }}/{{ service_name }}
          📋 Compose File: {{ compose_file }}
          ⚙️ Prometheus Config: {{ prometheus_config_file }}
          🔧 SSL Certificate Resolver: {{ ssl_cert_resolver }}
          
          🌐 Service Access URLs:
          • Prometheus (HTTPS): https://prometheus.{{ base_domain }}
          • Grafana (HTTPS): https://grafana.{{ base_domain }}
          
          📊 Monitoring Components Deployed:
          • Prometheus Server: Metrics collection and storage
          • Grafana: Visualization dashboards
          • Node Exporter: Ubuntu VM system metrics (CPU, RAM, disk, etc.)
          • cAdvisor: Docker container resource metrics
          • AdGuard Exporter: DNS analytics and query statistics
          
          📊 Service Status:
          {% if prometheus_access_test is defined and grafana_access_test is defined and running_containers is defined %}
          • Prometheus Access: {{ '✅ Accessible' if prometheus_access_test.status == 200 else '❌ Not accessible' }}
          • Grafana Access: {{ '✅ Accessible' if grafana_access_test.status == 200 else '❌ Not accessible' }}
          • Container Status: {{ 'Running' if running_containers.stdout else 'Starting' }}
          {% else %}
          • Service verification: ⏳ Run with --tags verify to check service status
          {% endif %}
          
          🔧 Service Management Commands:
          • View logs: docker compose -f {{ compose_file }} logs -f
          • Restart: docker compose -f {{ compose_file }} restart
          • Stop: docker compose -f {{ compose_file }} down
          • Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          📊 Monitoring Endpoints:
          • Prometheus: https://prometheus.{{ base_domain }}
          • Grafana: https://grafana.{{ base_domain }}
          • Node Exporter: http://{{ ubuntu_server_ip }}:9100/metrics
          • cAdvisor: http://{{ ubuntu_server_ip }}:8081/metrics
          • AdGuard Exporter: http://{{ ubuntu_server_ip }}:9618/metrics
          
          📝 Manual Configuration Required:
          1. **OPNsense Node Exporter**: Install plugin in OPNsense web interface
          2. **Grafana Setup**: Complete initial setup wizard and dashboard imports
          3. **Dashboard Configuration**: Import recommended dashboard IDs
          4. **Prometheus Targets**: Verify all targets are being scraped successfully
          
          🚀 Next Steps:
          1. Complete OPNsense Node Exporter plugin installation
          2. Access Grafana web interface at https://grafana.{{ base_domain }}
          3. Complete Grafana initial setup (admin user: admin, password from vault)
          4. Import recommended dashboards for comprehensive monitoring
          5. Verify all Prometheus targets are active and healthy
          6. Configure alerting rules and notification channels as needed
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          💡 USEFUL COMMANDS:
          
          # Check all monitoring services status
          docker compose -f {{ compose_file }} ps
          
          # View logs for specific service
          docker compose -f {{ compose_file }} logs -f prometheus
          docker compose -f {{ compose_file }} logs -f grafana
          
          # Access monitoring interfaces
          https://prometheus.{{ base_domain }}
          https://grafana.{{ base_domain }}
          
          # Check Prometheus targets
          curl -s https://prometheus.{{ base_domain }}/api/v1/targets | jq '.data.activeTargets[].health'
          
          # Test individual exporters
          curl http://{{ ubuntu_server_ip }}:9100/metrics   # Node Exporter
          curl http://{{ ubuntu_server_ip }}:8081/metrics   # cAdvisor
          curl http://{{ ubuntu_server_ip }}:9618/metrics   # AdGuard Exporter
          
          # Restart specific service
          docker compose -f {{ compose_file }} restart SERVICE_NAME
          
          # Check container resource usage
          docker stats prometheus grafana cadvisor node-exporter adguard-exporter
      tags: 
        - always 