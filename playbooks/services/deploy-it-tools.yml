---
# =============================================================================
# PHASE 4: Family Services - IT Tools Deployment
# =============================================================================
# 
# This playbook deploys IT Tools, a collection of handy online utilities for
# developers and IT professionals including network tools, text processing,
# encoding/decoding, generators, and converters.
#
# Prerequisites:
# - Phase 1, 2, and 3 completed (infrastructure, core services, supporting services)
# - DNS overrides configured in OPNsense for ittools.radiowaves.app
# - Traefik operational with SSL certificate generation
# - Docker installed and homelab network created
#
# What this playbook does:
# 1. Creates IT Tools configuration directories
# 2. Deploys IT Tools container with Traefik integration
# 3. Configures automatic update notifications via WUD
# 4. Verifies service deployment and accessibility
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing service configuration
# - Handles configuration updates gracefully
# - Works with existing IT Tools deployments
#
# Manual Configuration Required:
# - DNS overrides in OPNsense for ittools.radiowaves.app
# - Optional: Bookmark frequently used tools
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-it-tools.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and configuration
# --tags deploy     : Only deploy/update the service
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart service
# =============================================================================

- name: Deploy IT Tools
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "it-tools"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    ssl_cert_resolver: "myresolver"
    
  tasks:
    # =============================================================================
    # SETUP: Directory and Configuration Creation
    # =============================================================================
    
    - name: "Setup - Create IT Tools directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/config"
      tags: 
        - setup
        - always

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "it-tools-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display configuration file locations"
      debug:
        msg: |
          üìã IT TOOLS CONFIGURATION FILES:
          ‚Ä¢ Docker Compose file: {{ compose_file }}
          ‚Ä¢ Service directory: {{ data_directory }}/{{ service_name }}
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing IT Tools containers"
      shell: "docker ps -a | grep it-tools || true"
      register: existing_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Display existing container status"
      debug:
        msg: |
          üîç IT TOOLS DEPLOYMENT CHECK:
          
          {% if existing_containers.stdout %}
          ‚ö†Ô∏è  Existing IT Tools container found:
          {{ existing_containers.stdout }}
          {% else %}
          ‚úÖ No existing IT Tools container found
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        if docker ps -a -q -f name=^it-tools$ | grep -q .; then
          echo "Removing existing container: it-tools"
          docker stop it-tools 2>/dev/null || true
          docker rm it-tools 2>/dev/null || true
        fi
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start IT Tools service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for IT Tools to be ready"
      wait_for:
        port: 80
        host: "{{ ubuntu_server_ip }}"
        timeout: 60
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Test IT Tools via Traefik (if SSL configured)"
      uri:
        url: "https://ittools.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
        status_code: [200, 302]
      register: traefik_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display access test results"
      debug:
        msg: |
          üì° IT TOOLS ACCESS TEST RESULTS:
          
          {% if traefik_test is defined %}
          ‚Ä¢ HTTPS Access: {{ '‚úÖ Success' if traefik_test.status in [200, 302] else '‚ùå Failed (' + (traefik_test.status | string) + ')' }}
          {% else %}
          ‚Ä¢ HTTPS Access: ‚è≥ SSL certificates may take 1-2 minutes to generate
          {% endif %}
          
          üí° Note: Access IT Tools at https://ittools.{{ base_domain }}
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          üõ†Ô∏è IT TOOLS DEPLOYMENT SUMMARY
          ============================================================
          
          üìÅ Service Directory: {{ data_directory }}/{{ service_name }}
          üìã Compose File: {{ compose_file }}
          üîß SSL Certificate Resolver: {{ ssl_cert_resolver }}
          
          üåê Service Access URL:
          ‚Ä¢ IT Tools: https://ittools.{{ base_domain }}
          
          üìä Service Status:
          {% if traefik_test is defined %}
          ‚Ä¢ HTTPS Access: {{ '‚úÖ Accessible' if traefik_test.status in [200, 302] else '‚ùå Not accessible' }}
          {% else %}
          ‚Ä¢ Service verification: ‚è≥ Run with --tags verify to check service status
          {% endif %}
          
          üîß Service Management Commands:
          ‚Ä¢ View logs: docker compose -f {{ compose_file }} logs -f
          ‚Ä¢ Restart: docker compose -f {{ compose_file }} restart
          ‚Ä¢ Stop: docker compose -f {{ compose_file }} down
          ‚Ä¢ Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          üìù Manual Configuration Required:
          1. **DNS Override**: Configure ittools.{{ base_domain }} ‚Üí {{ ubuntu_server_ip }} in OPNsense
          2. **Access Tools**: Visit https://ittools.{{ base_domain }} to use developer utilities
          3. **Bookmark Tools**: Bookmark frequently used tools for quick access
          
          üöÄ Available Tool Categories:
          ‚Ä¢ Network tools and diagnostics
          ‚Ä¢ Text processing and encoding utilities
          ‚Ä¢ QR code generation and scanning
          ‚Ä¢ Hash generators and validators
          ‚Ä¢ Base64 encoding/decoding
          ‚Ä¢ JSON/YAML formatters and validators
          ‚Ä¢ Color converters and generators
          ‚Ä¢ Regular expression testing
          ‚Ä¢ And many more developer utilities
          
          ‚ö†Ô∏è  Important Notes:
          ‚Ä¢ IT Tools runs entirely in the browser - no data is sent to external servers
          ‚Ä¢ All processing happens client-side for maximum privacy and security
          ‚Ä¢ Tools are immediately available after deployment
          ‚Ä¢ Service automatically monitored by WUD for update notifications when new versions are available
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          üí° USEFUL COMMANDS:
          
          # Check service status
          docker compose -f {{ compose_file }} ps
          
          # View logs
          docker compose -f {{ compose_file }} logs -f it-tools
          
          # Access IT Tools
          https://ittools.{{ base_domain }}
          
          # Test DNS resolution
          nslookup ittools.{{ base_domain }}
          
          # Check container resource usage
          docker stats it-tools
          
          # Manual update
          docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
      tags: 
        - always 