---
# =============================================================================
# PHASE 3: Supporting Services - WUD Docker Image Update Notifications
# =============================================================================
# 
# This playbook deploys WUD (What's Up Docker) for monitoring Docker container
# updates with NTFY notification integration and semantic version-aware
# update monitoring management.
#
# Prerequisites:
# - Phase 1 infrastructure setup completed
# - Phase 2 core services deployed (Traefik, NTFY, AdGuard Home)
# - Docker installed and homelab network created
# - NTFY service operational for update notifications
# - Containers properly labeled for selective monitoring
#
# What this playbook does:
# 1. Deploys WUD Docker Compose stack
# 2. Configures semantic version-aware update checking (daily at 6 PM)
# 3. Sets up native NTFY notification integration for update reports
# 4. Enables selective container update monitoring via labels
# 5. Provides web UI access via Traefik for monitoring status
# 6. Verifies service deployment and notification functionality
#
# Idempotent Design:
# - Safe to run multiple times
# - Handles configuration updates gracefully
# - Works with existing WUD deployments
# - Preserves update schedules and settings
#
# Manual Configuration Required:
# - Verify container labels for selective monitoring
# - Monitor update notifications via NTFY
# - Test notification delivery and web UI access
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-wud.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and configuration
# --tags deploy     : Only deploy/update the service
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart service
# =============================================================================

- name: Deploy WUD Docker Image Update Notifier
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "wud"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    
  tasks:
    # =============================================================================
    # SETUP: Configuration Creation
    # =============================================================================
    
    - name: "Setup - Ensure compose directory exists"
      file:
        path: "{{ data_directory }}/compose"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      tags: 
        - setup
        - always

    - name: "Setup - Ensure WUD data directory exists"
      file:
        path: "{{ data_directory }}/wud/store"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      tags: 
        - setup
        - always

    - name: "Setup - Generate WUD notification script from template"
      template:
        src: "wud-notify.sh.j2"
        dest: "{{ data_directory }}/wud/notify.sh"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
        backup: yes
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "wud-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display compose file location"
      debug:
        msg: "Docker Compose file created at: {{ compose_file }}"
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing WUD containers"
      shell: "docker ps -a | grep wud || true"
      register: existing_wud_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Display existing WUD containers"
      debug:
        msg: |
          üîç EXISTING WUD CONTAINERS CHECK:
          {% if existing_wud_containers.stdout %}
          ‚ö†Ô∏è  Found existing WUD containers:
          {{ existing_wud_containers.stdout }}
          
          üí° Note: Will be managed by Ansible if names match
          {% else %}
          ‚úÖ No existing WUD containers found
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        if docker ps -a -q -f name=^wud$ | grep -q .; then
          echo "Removing existing container: wud"
          docker stop wud 2>/dev/null || true
          docker rm wud 2>/dev/null || true
        fi
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start WUD service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for WUD service to initialize"
      pause:
        seconds: 15
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Check WUD logs"
      shell: "docker logs wud | tail -20"
      register: wud_logs
      changed_when: false
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display recent logs"
      debug:
        msg: |
          üìã RECENT WUD LOGS:
          {{ wud_logs.stdout_lines | join('\n') }}
      tags: 
        - verify
        - always

    - name: "Verify - Test WUD web interface accessibility"
      uri:
        url: "http://localhost:3000"
        method: GET
        timeout: 10
      register: wud_web_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test NTFY notification connectivity"
      uri:
        url: "http://localhost:8082/homelab-updates"
        method: POST
        body: "WUD notification test - service deployed successfully"
        headers:
          Authorization: "Bearer {{ vault_ntfy_token }}"
          Title: "üê≥ WUD Test Notification"
          Priority: "3"
          Tags: "docker,updates,test"
        timeout: 10
      register: ntfy_test_result
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display verification results"
      debug:
        msg: |
          üîç WUD SERVICE VERIFICATION RESULTS:
          
          ‚Ä¢ Web Interface: {{ '‚úÖ Accessible' if wud_web_test.status == 200 else '‚ùå Not accessible' }}
          ‚Ä¢ NTFY Integration: {{ '‚úÖ Working' if ntfy_test_result.status in [200, 202] else '‚ùå Check configuration' }}
          
          üí° Web UI: https://wud.{{ base_domain }}
          üí° Check your NTFY client for the test notification
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          ‚ö° WUD DEPLOYMENT SUMMARY
          ============================================================
          
          üìã Compose File: {{ compose_file }}
          ‚è∞ Update Check Schedule: {{ services.wud.schedule }}
          üì° NTFY Channel: homelab-updates
          üåê Web Interface: https://wud.{{ base_domain }}
          
          üîß Update Configuration:
          ‚Ä¢ Label-based monitoring: Only containers with wud.watch=true
          ‚Ä¢ Semantic versioning: Major/minor notifications only
          ‚Ä¢ Notifications: Native NTFY integration with custom templates
          ‚Ä¢ Web UI: Real-time monitoring dashboard available
          
          üìä Service Status:
          {% if running_containers is defined and ntfy_test_result is defined %}
          ‚Ä¢ Container Status: {{ 'Running' if running_containers.stdout else 'Starting' }}
          ‚Ä¢ NTFY Integration: {{ '‚úÖ Working' if ntfy_test_result.status in [200, 202] else '‚ùå Check configuration' }}
          {% else %}
          ‚Ä¢ Service verification: ‚è≥ Run with --tags verify to check service status
          {% endif %}
          
          üîß Service Management Commands:
          ‚Ä¢ View logs: docker compose -f {{ compose_file }} logs -f
          ‚Ä¢ Check notifications: docker logs wud | grep -i "notification\|ntfy"
          ‚Ä¢ Restart: docker compose -f {{ compose_file }} restart
          ‚Ä¢ Stop: docker compose -f {{ compose_file }} down
          
          üìù Manual Tasks Required:
          1. **Verify Container Labels**: Ensure containers have wud.watch=true label
          2. **Monitor First Check**: Watch logs during first scheduled check cycle
          3. **Test Web Interface**: Access WUD dashboard at https://wud.{{ base_domain }}
          4. **Update Management**: Monitor notification success and handle any failures
          
          üöÄ Next Steps:
          1. Check container labels: docker ps --filter "label=wud.watch=true"
          2. Monitor check logs: docker logs -f wud
          3. Access web interface: https://wud.{{ base_domain }}
          4. Verify NTFY notifications are received
          5. Deploy other Phase 3 services as needed (Homarr, Uptime Kuma)
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Container labeling requirements"
      debug:
        msg: |
          üí° CONTAINER LABELING REQUIREMENTS:
          
          For containers to be monitored by WUD, they must include these labels:
          
          labels:
            - "wud.watch=true"
            - "wud.tag.include=^\\d+\\.\\d+\\.\\d+$"
            - "wud.tag.exclude=latest|alpha|beta|rc|dev"
            - "wud.trigger.include=command.ntfy"
            - "wud.display.name=Service Name"
            - "wud.link.template=https://github.com/..."
          
          # Check which containers are enabled for monitoring
          docker ps --filter "label=wud.watch=true"
          
          # View WUD activity
          docker logs wud | grep -i "check\|notification\|ntfy"
          
          # Access web interface
          https://wud.{{ base_domain }}
          
          # Monitor update notifications
          # Check your NTFY client for homelab-updates channel
      tags: 
        - always 