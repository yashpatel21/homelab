---
# =============================================================================
# PHASE 4: Family Services - ConvertX Deployment
# =============================================================================
# 
# This playbook deploys ConvertX, a self-hosted online file converter that
# supports over 1000 different formats including documents, images, audio,
# video, and more with client-side processing for privacy.
#
# Prerequisites:
# - Phase 1, 2, and 3 completed (infrastructure, core services, supporting services)
# - DNS overrides configured in OPNsense for convert.radiowaves.app
# - Traefik operational with SSL certificate generation
# - Docker installed and homelab network created
#
# What this playbook does:
# 1. Creates ConvertX configuration and data directories
# 2. Deploys ConvertX container with Traefik integration
# 3. Configures secure environment with JWT authentication
# 4. Sets up automatic file cleanup and update notifications via WUD
# 5. Verifies service deployment and accessibility
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing service configuration and data
# - Handles configuration updates gracefully
# - Works with existing ConvertX deployments
#
# Manual Configuration Required:
# - DNS overrides in OPNsense for convert.radiowaves.app
# - Initial account registration via web interface
# - Optional: File conversion preferences and settings
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-convertx.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and configuration
# --tags deploy     : Only deploy/update the service
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart service
# =============================================================================

- name: Deploy ConvertX
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "convertx"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    ssl_cert_resolver: "myresolver"
    
  tasks:
    # =============================================================================
    # SETUP: Directory and Configuration Creation
    # =============================================================================
    
    - name: "Setup - Create ConvertX directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/data"
      tags: 
        - setup
        - always

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "convertx-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display configuration file locations"
      debug:
        msg: |
          📋 CONVERTX CONFIGURATION FILES:
          • Docker Compose file: {{ compose_file }}
          • Service directory: {{ data_directory }}/{{ service_name }}
          • Data directory: {{ data_directory }}/{{ service_name }}/data
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing ConvertX containers"
      shell: "docker ps -a | grep convertx || true"
      register: existing_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Display existing container status"
      debug:
        msg: |
          🔍 CONVERTX DEPLOYMENT CHECK:
          
          {% if existing_containers.stdout %}
          ⚠️  Existing ConvertX container found:
          {{ existing_containers.stdout }}
          {% else %}
          ✅ No existing ConvertX container found
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        if docker ps -a -q -f name=^convertx$ | grep -q .; then
          echo "Removing existing container: convertx"
          docker stop convertx 2>/dev/null || true
          docker rm convertx 2>/dev/null || true
        fi
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start ConvertX service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for ConvertX to be ready"
      wait_for:
        port: 3000
        host: "{{ ubuntu_server_ip }}"
        timeout: 60
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Test ConvertX via Traefik (if SSL configured)"
      uri:
        url: "https://convert.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
        status_code: [200, 302]
      register: traefik_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display access test results"
      debug:
        msg: |
          📡 CONVERTX ACCESS TEST RESULTS:
          
          {% if traefik_test is defined %}
          • HTTPS Access: {{ '✅ Success' if traefik_test.status in [200, 302] else '❌ Failed (' + (traefik_test.status | string) + ')' }}
          {% else %}
          • HTTPS Access: ⏳ SSL certificates may take 1-2 minutes to generate
          {% endif %}
          
          💡 Note: Access ConvertX at https://convert.{{ base_domain }}
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          🔄 CONVERTX DEPLOYMENT SUMMARY
          ============================================================
          
          📁 Service Directory: {{ data_directory }}/{{ service_name }}
          📋 Compose File: {{ compose_file }}
          💾 Data Directory: {{ data_directory }}/{{ service_name }}/data
          🔧 SSL Certificate Resolver: {{ ssl_cert_resolver }}
          
          🌐 Service Access URL:
          • ConvertX: https://convert.{{ base_domain }}
          
          📊 Service Status:
          {% if traefik_test is defined %}
          • HTTPS Access: {{ '✅ Accessible' if traefik_test.status in [200, 302] else '❌ Not accessible' }}
          {% else %}
          • Service verification: ⏳ Run with --tags verify to check service status
          {% endif %}
          
          🔧 Service Management Commands:
          • View logs: docker compose -f {{ compose_file }} logs -f
          • Restart: docker compose -f {{ compose_file }} restart
          • Stop: docker compose -f {{ compose_file }} down
          • Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          📝 Manual Configuration Required:
          1. **DNS Override**: Configure convert.{{ base_domain }} → {{ ubuntu_server_ip }} in OPNsense
          2. **Account Setup**: Visit https://convert.{{ base_domain }} to create first user account
          3. **Security Setup**: Configure account registration settings and user permissions
          
          🚀 Available Features:
          • Document conversion (PDF, Word, Excel, PowerPoint, etc.)
          • Image processing and conversion (JPEG, PNG, WebP, HEIF, etc.)
          • Audio format conversion (MP3, FLAC, WAV, OGG, etc.)
          • Video format conversion (MP4, AVI, MOV, WebM, etc.)
          • Archive and compression support
          • Batch processing capabilities
          • Password protection for sensitive files
          • Multiple user accounts with individual conversion history
          
          ⚠️  Important Notes:
          • First user registration creates the admin account
          • Account registration is disabled after initial setup for security
          • Files are automatically cleaned up every 24 hours
          • All processing happens server-side with support for 1000+ formats
          • Service requires significant CPU and storage for large file conversions
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          💡 USEFUL COMMANDS:
          
          # Check service status
          docker compose -f {{ compose_file }} ps
          
          # View logs
          docker compose -f {{ compose_file }} logs -f convertx
          
          # Access ConvertX
          https://convert.{{ base_domain }}
          
          # Test DNS resolution
          nslookup convert.{{ base_domain }}
          
          # Check container resource usage
          docker stats convertx
          
          # Manual update
          docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          # Check data directory size
          du -sh {{ data_directory }}/{{ service_name }}/data
      tags: 
        - always 