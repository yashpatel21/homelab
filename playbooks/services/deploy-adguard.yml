---
# =============================================================================
# PHASE 2: Core Services - AdGuard Home DNS Filtering Deployment
# =============================================================================
# 
# This playbook deploys AdGuard Home DNS filtering service with complete
# integration, DNS configuration, and OPNsense failover automation.
#
# Prerequisites:
# - Phase 1 infrastructure setup completed
# - Traefik reverse proxy deployed and functional
# - NTFY notification service deployed with access token in vault
# - DNS overrides configured in OPNsense for adguard.radiowaves.app
# - Docker installed and homelab network created
#
# What this playbook does:
# 1. Configures DNS resolution (disables systemd-resolved stub)
# 2. Creates AdGuard Home configuration directories
# 3. Deploys AdGuard Home Docker Compose stack with Traefik integration
# 4. Deploys OPNsense DNS failover script with NTFY notifications
# 5. Verifies service deployment and DNS functionality
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing AdGuard Home configuration
# - Handles DNS configuration updates gracefully
# - Works with existing AdGuard Home deployments
#
# Manual Configuration Required:
# - AdGuard Home initial setup wizard (admin password, DNS servers)
# - DNS blocklist configuration via web interface
# - OPNsense DNS forwarding configuration (documented in GUI steps)
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-adguard.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and DNS configuration
# --tags deploy     : Only deploy/update the service
# --tags failover   : Only deploy OPNsense failover script
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart service
# =============================================================================

- name: Deploy AdGuard Home DNS Filtering Service
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "adguard"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    ssl_cert_resolver: "myresolver"
    
  tasks:
    # =============================================================================
    # SETUP: DNS Configuration and Directory Creation
    # =============================================================================
    
    - name: "Setup - Check if systemd-resolved is using DNS stub"
      command: "netstat -tulpn | grep :53"
      register: dns_port_check
      changed_when: false
      failed_when: false
      tags: 
        - setup
        - always

    - name: "Setup - Display current DNS port usage"
      debug:
        msg: |
          🔍 CURRENT DNS PORT 53 USAGE:
          {% if dns_port_check.stdout %}
          {{ dns_port_check.stdout }}
          {% else %}
          ✅ Port 53 appears to be free
          {% endif %}
      tags: 
        - setup
        - always

    - name: "Setup - Create systemd-resolved configuration directory"
      file:
        path: "/etc/systemd/resolved.conf.d"
        state: directory
        owner: "root"
        group: "root"
        mode: '0755'
      tags: 
        - setup

    - name: "Setup - Configure systemd-resolved for AdGuard Home"
      copy:
        dest: "/etc/systemd/resolved.conf.d/adguardhome.conf"
        content: |
          [Resolve]
          DNS=192.168.1.1
          FallbackDNS=1.1.1.1#cloudflare-dns.com 9.9.9.9#dns.quad9.net
          DNSStubListener=no
          DNSOverTLS=opportunistic
        owner: "root"
        group: "root"
        mode: '0644'
      register: resolved_config
      tags: 
        - setup

    - name: "Setup - Backup current resolv.conf"
      copy:
        src: "/etc/resolv.conf"
        dest: "/etc/resolv.conf.backup"
        remote_src: yes
      failed_when: false
      tags: 
        - setup

    - name: "Setup - Update resolv.conf symlink"
      file:
        path: "/etc/resolv.conf"
        src: "/run/systemd/resolve/resolv.conf"
        state: link
        force: yes
      register: resolv_updated
      tags: 
        - setup

    - name: "Setup - Restart systemd-resolved"
      systemd:
        name: "systemd-resolved"
        state: restarted
      when: resolved_config.changed or resolv_updated.changed
      tags: 
        - setup

    - name: "Setup - Wait for systemd-resolved to start"
      pause:
        seconds: 5
      when: resolved_config.changed or resolv_updated.changed
      tags: 
        - setup

    - name: "Setup - Verify port 53 is free"
      command: "netstat -tulpn | grep :53"
      register: dns_port_final_check
      changed_when: false
      failed_when: false
      tags: 
        - setup
        - verify

    - name: "Setup - Display final DNS port status"
      debug:
        msg: |
          📡 DNS PORT 53 STATUS AFTER CONFIGURATION:
          {% if dns_port_final_check.stdout %}
          ⚠️  Port 53 still in use:
          {{ dns_port_final_check.stdout }}
          
          💡 This may be normal if systemd-resolved is configured correctly
          💡 AdGuard Home will still be able to bind to port 53 in container
          {% else %}
          ✅ Port 53 is free for AdGuard Home
          {% endif %}
      tags: 
        - setup
        - always

    - name: "Setup - Create AdGuard Home directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/work"
        - "{{ data_directory }}/{{ service_name }}/conf"
      tags: 
        - setup
        - always

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "adguard-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display compose file location"
      debug:
        msg: "Docker Compose file created at: {{ compose_file }}"
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing AdGuard Home containers"
      shell: "docker ps -a | grep adguard || true"
      register: existing_adguard_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Display existing AdGuard Home containers"
      debug:
        msg: |
          🔍 EXISTING ADGUARD HOME CONTAINERS CHECK:
          {% if existing_adguard_containers.stdout %}
          ⚠️  Found existing AdGuard Home containers:
          {{ existing_adguard_containers.stdout }}
          
          💡 Note: Will be managed by Ansible if names match
          {% else %}
          ✅ No existing AdGuard Home containers found
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        if docker ps -a -q -f name=^adguard$ | grep -q .; then
          echo "Removing existing container: adguard"
          docker stop adguard 2>/dev/null || true
          docker rm adguard 2>/dev/null || true
        fi
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start AdGuard Home service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for AdGuard Home to be ready"
      wait_for:
        port: 3000
        host: "{{ ubuntu_server_ip }}"
        timeout: 60
      tags: 
        - deploy
        - verify

    - name: "Deploy - Wait for DNS service to be ready"
      wait_for:
        port: 53
        host: "{{ ubuntu_server_ip }}"
        timeout: 60
      tags: 
        - deploy
        - verify

    # =============================================================================
    # FAILOVER: OPNsense DNS Failover Script Deployment
    # =============================================================================

    - name: "Failover - Check if NTFY token is available"
      set_fact:
        has_ntfy_token: "{{ vault_ntfy_token is defined and vault_ntfy_token != '' and vault_ntfy_token != 'PLACEHOLDER_TOKEN' }}"
      tags: 
        - failover
        - always

    - name: "Failover - Display NTFY token availability"
      debug:
        msg: |
          🔑 NTFY TOKEN STATUS:
          {% if has_ntfy_token %}
          ✅ NTFY token available - deploying failover script
          {% else %}
          ❌ NTFY token not available - skipping failover script deployment
          💡 Deploy NTFY service first or add token to vault
          {% endif %}
      tags: 
        - failover
        - always

- name: Deploy OPNsense DNS Failover Script
  hosts: opnsense_hosts
  become: true
  vars:
    service_name: "adguard"
    script_path: "/usr/local/bin/agh_failover.sh"
    
  tasks:
    - name: "Failover - Load vault variables"
      include_vars: "../../inventory/group_vars/all/vault.yml"
      tags: 
        - failover
        - always

    - name: "Failover - Check if NTFY token is available"
      set_fact:
        has_ntfy_token: "{{ vault_ntfy_token is defined and vault_ntfy_token != '' and vault_ntfy_token != 'PLACEHOLDER_TOKEN' }}"
      tags: 
        - failover
        - always

    - name: "Failover - Create script directory"
      file:
        path: "/usr/local/bin"
        state: directory
        owner: "root"
        group: "wheel"
        mode: '0755'
      when: has_ntfy_token
      tags: 
        - failover

    - name: "Failover - Deploy DNS failover script"
      template:
        src: "opnsense-agh-failover.sh.j2"
        dest: "{{ script_path }}"
        owner: "root"
        group: "wheel"
        mode: '0755'
        backup: yes
      when: has_ntfy_token
      register: failover_script_deployed
      tags: 
        - failover

    - name: "Failover - Configure failover script cron job"
      cron:
        name: "AdGuard Home DNS failover check"
        user: "root"
        job: "{{ script_path }} > /dev/null 2>&1"
        state: present
      when: has_ntfy_token
      tags: 
        - failover

    - name: "Failover - Test failover script execution"
      shell: "{{ script_path }}"
      register: failover_script_test
      when: has_ntfy_token and failover_script_deployed.changed
      failed_when: false
      tags: 
        - failover
        - verify

    - name: "Failover - Display script deployment status"
      debug:
        msg: |
          🔄 OPNSENSE DNS FAILOVER SCRIPT STATUS:
          {% if has_ntfy_token %}
          ✅ DNS failover script deployed
          ✅ Cron job configured (every minute)
          📁 Script location: {{ script_path }}
          
          🧪 Script Test Results:
          {% if failover_script_test is defined %}
          • Exit code: {{ failover_script_test.rc }}
          • Output: {{ failover_script_test.stdout if failover_script_test.stdout else 'No output' }}
          {% if failover_script_test.stderr %}
          • Errors: {{ failover_script_test.stderr }}
          {% endif %}
          {% endif %}
          
          💡 Check NTFY at https://ntfy.{{ base_domain }}/opnsense-alerts for failover notifications
          
          🔧 Manual OPNsense DNS Configuration Required:
          1. Services → Unbound DNS → Query Forwarding
          2. Add DNS forward: Domain: blank, Server: {{ ubuntu_server_ip }}, Port: 53
          3. Apply changes
          
          See documentation for complete OPNsense DNS configuration steps.
          {% else %}
          ❌ Script deployment skipped - NTFY token not available
          💡 Deploy NTFY service first and add token to vault
          {% endif %}
      tags: 
        - failover
        - always

# =============================================================================
# VERIFICATION: Service Health Checks and Final Summary
# =============================================================================

- name: Verify AdGuard Home Service and Display Final Summary
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "adguard"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    
  tasks:
    - name: "Final Check - Verify NTFY token availability"
      set_fact:
        has_ntfy_token: "{{ vault_ntfy_token is defined and vault_ntfy_token != '' and vault_ntfy_token != 'PLACEHOLDER_TOKEN' }}"
      tags: 
        - verify
        - always

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Test AdGuard Home web interface"
      uri:
        url: "http://{{ ubuntu_server_ip }}:3000"
        method: GET
        timeout: 10
      register: web_direct_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test AdGuard Home via Traefik"
      uri:
        url: "https://adguard.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
      register: web_traefik_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test DNS resolution"
      command: "nslookup google.com {{ ubuntu_server_ip }}"
      register: dns_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display DNS test results"
      debug:
        msg: |
          🧪 DNS RESOLUTION TEST:
          {% if dns_test.rc == 0 %}
          ✅ DNS resolution working
          {{ dns_test.stdout }}
          {% else %}
          ❌ DNS resolution failed
          {{ dns_test.stderr if dns_test.stderr else 'No error output' }}
          {% endif %}
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Final Deployment Summary
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          🛡️ ADGUARD HOME DEPLOYMENT SUMMARY
          ============================================================
          
          📁 Service Directory: {{ data_directory }}/{{ service_name }}
          📋 Compose File: {{ compose_file }}
          🔧 SSL Certificate Resolver: {{ ssl_cert_resolver }}
          
          🌐 Service Access URLs:
          • AdGuard Home Direct: http://{{ ubuntu_server_ip }}:3000
          • AdGuard Home (SSL): https://adguard.{{ base_domain }}
          • DNS Service: {{ ubuntu_server_ip }}:53
          
          📊 Service Status:
          • Direct Access: {{ '✅ Accessible' if web_direct_test.status == 200 else '❌ Not accessible' }}
          • Traefik Access: {{ '✅ Accessible' if web_traefik_test.status == 200 else '❌ Not accessible' }}
          • DNS Resolution: {{ '✅ Working' if dns_test.rc == 0 else '❌ Failed' }}
          
          🔧 DNS Configuration:
          • systemd-resolved: ✅ Configured for AdGuard Home
          • Port 53: ✅ Available for AdGuard Home
          • DNS Forwarding: ⚠️  Requires manual OPNsense configuration
          
          🔄 Failover Configuration:
          {% if has_ntfy_token %}
          • OPNsense Failover: ✅ Script deployed with NTFY notifications
          {% else %}
          • OPNsense Failover: ❌ Skipped (NTFY token not available)
          {% endif %}
          
          🔧 Service Management Commands:
          • View logs: docker compose -f {{ compose_file }} logs -f
          • Restart: docker compose -f {{ compose_file }} restart
          • Stop: docker compose -f {{ compose_file }} down
          • Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          📝 Manual Configuration Required:
          1. **Initial Setup**: Access https://adguard.{{ base_domain }} and complete setup wizard
          2. **DNS Configuration**: Configure upstream DNS servers and blocklists
          3. **OPNsense Setup**: Configure DNS forwarding in OPNsense (see documentation)
          4. **Network Setup**: Update DHCP to use AdGuard Home as DNS server
          
          📖 Configuration Steps:
          • Admin Password: Set during initial setup wizard
          • DNS Settings: Configure upstream DNS servers (1.1.1.1, 9.9.9.9)
          • Blocklists: Add DNS blocklists for ad blocking
          • Private DNS: Configure for local domain resolution
          
          🚀 Next Steps:
          1. Complete AdGuard Home initial setup via web interface
          2. Configure DNS blocklists for ad blocking
          3. Update OPNsense DNS forwarding configuration
          4. Test DNS filtering and ad blocking functionality
          5. Proceed to Phase 3 supporting services deployment
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          💡 USEFUL COMMANDS:
          
          # Check service status
          docker compose -f {{ compose_file }} ps
          
          # View logs
          docker compose -f {{ compose_file }} logs -f adguard
          
          # Test DNS resolution
          nslookup google.com {{ ubuntu_server_ip }}
          
          # Test DNS blocking (should be blocked after setup)
          nslookup doubleclick.net {{ ubuntu_server_ip }}
          
          # Check DNS port usage
          netstat -tulpn | grep :53
          
          # Access AdGuard Home
          https://adguard.{{ base_domain }}
      tags: 
        - always 