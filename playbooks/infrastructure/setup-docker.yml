---
# =============================================================================
# PHASE 1: Infrastructure Foundation - Docker Installation & Configuration
# =============================================================================
# 
# This playbook handles Docker installation and configuration on the Ubuntu
# server, creating the foundation for all containerized services.
#
# Prerequisites:
# - Complete infrastructure setup from prerequisites.md
# - Base system setup completed (setup-base.yml)
# - Storage configuration completed (setup-storage.yml)
#
# What this playbook does:
# 1. Installs Docker using the official installation script
# 2. Installs Docker Compose plugin
# 3. Adds primary user to docker group
# 4. Creates homelab Docker network
# 5. Configures Docker daemon settings
# 6. Enables and starts Docker service
# 7. Verifies Docker installation and functionality
#
# Manual steps required BEFORE running this playbook:
# - Complete ALL tasks in prerequisites.md
# - Run setup-base.yml and setup-storage.yml playbooks first
#
# HOW TO RUN THIS PLAYBOOK:
# ansible-playbook -i inventory/homelab.yml playbooks/infrastructure/setup-docker.yml --ask-vault-pass
#
# =============================================================================

# =============================================================================
# UBUNTU SERVER DOCKER CONFIGURATION
# =============================================================================

- name: "Phase 1.3 - Ubuntu Server Docker Installation & Configuration"
  hosts: ubuntu_servers
  become: yes
  gather_facts: yes

  tasks:
    # -------------------------------------------------------------------------
    # DOCKER INSTALLATION
    # -------------------------------------------------------------------------
    
    - name: "Check if Docker is already installed"
      command: docker --version
      register: docker_version_check
      failed_when: false
      changed_when: false
      tags: [docker, install]

    - name: "Download Docker installation script"
      get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'
      when: docker_version_check.rc != 0
      tags: [docker, install]

    - name: "Install Docker using official script"
      shell: /tmp/get-docker.sh
      when: docker_version_check.rc != 0
      tags: [docker, install]

    - name: "Remove Docker installation script"
      file:
        path: /tmp/get-docker.sh
        state: absent
      when: docker_version_check.rc != 0
      tags: [docker, install]

    # -------------------------------------------------------------------------
    # DOCKER COMPOSE INSTALLATION
    # -------------------------------------------------------------------------

    - name: "Install Docker Compose plugin"
      apt:
        name: docker-compose-plugin
        state: present
        update_cache: yes
      tags: [docker, compose]

    # -------------------------------------------------------------------------
    # USER CONFIGURATION
    # -------------------------------------------------------------------------

    - name: "Add primary user to docker group"
      user:
        name: "{{ ubuntu_primary_user }}"
        groups: docker
        append: yes
      tags: [docker, users]

    # -------------------------------------------------------------------------
    # DOCKER SERVICE CONFIGURATION
    # -------------------------------------------------------------------------

    - name: "Enable and start Docker service"
      systemd:
        name: docker
        enabled: yes
        state: started
        daemon_reload: yes
      tags: [docker, service]

    - name: "Verify Docker service is running"
      systemd:
        name: docker
      register: docker_service_status
      tags: [docker, service]

    # -------------------------------------------------------------------------
    # DOCKER DAEMON CONFIGURATION
    # -------------------------------------------------------------------------

    - name: "Create Docker daemon configuration directory"
      file:
        path: /etc/docker
        state: directory
        mode: '0755'
      tags: [docker, config]

    - name: "Configure Docker daemon settings"
      copy:
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            },
            "storage-driver": "overlay2",
            "features": {
              "buildkit": true
            }
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker
      tags: [docker, config]

    # -------------------------------------------------------------------------
    # DOCKER NETWORK CONFIGURATION
    # -------------------------------------------------------------------------

    - name: "Create homelab Docker network"
      docker_network:
        name: "{{ homelab_network_name }}"
        driver: bridge
        ipam_config:
          - subnet: "{{ docker_network_subnet }}"
      become: no
      become_user: "{{ ubuntu_primary_user }}"
      tags: [docker, network]

    # -------------------------------------------------------------------------
    # VERIFICATION
    # -------------------------------------------------------------------------

    - name: "Verify Docker installation"
      command: docker --version
      register: docker_version_final
      changed_when: false
      become: no
      become_user: "{{ ubuntu_primary_user }}"
      tags: [docker, verify]

    - name: "Verify Docker Compose installation"
      command: docker compose version
      register: docker_compose_version
      changed_when: false
      become: no
      become_user: "{{ ubuntu_primary_user }}"
      tags: [docker, verify]

    - name: "Verify Docker service is active"
      command: docker info
      register: docker_info
      changed_when: false
      become: no
      become_user: "{{ ubuntu_primary_user }}"
      tags: [docker, verify]

    - name: "Verify homelab network exists"
      command: docker network ls
      register: docker_networks
      changed_when: false
      become: no
      become_user: "{{ ubuntu_primary_user }}"
      tags: [docker, verify]

    - name: "Display Docker installation summary"
      debug:
        msg:
          - "Docker Version: {{ docker_version_final.stdout }}"
          - "Docker Compose Version: {{ docker_compose_version.stdout }}"
          - "Docker Service: {{ docker_service_status.status.ActiveState }}"
          - "Networks Available: {{ docker_networks.stdout_lines | length }} networks"
      tags: [docker, verify]

  # ---------------------------------------------------------------------------
  # HANDLERS
  # ---------------------------------------------------------------------------

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
        daemon_reload: yes

# =============================================================================
# PLAYBOOK EXECUTION SUMMARY
# =============================================================================
#
# This playbook completes the Docker setup for your homelab infrastructure.
# 
# Execution Order:
# 1. Ubuntu Server: Docker installation, configuration, and network setup
#
# What was configured:
# ✅ Docker installed using official installation script
# ✅ Docker Compose plugin installed
# ✅ Primary user added to docker group
# ✅ Docker daemon configured with logging and storage optimization
# ✅ Homelab Docker network created
# ✅ Docker service enabled and started
# ✅ Installation verified and tested
#
# Prerequisites (completed before this playbook):
# ✅ Infrastructure setup (Proxmox installation, Ubuntu VM creation)
# ✅ Base system setup (packages, SSH, users, system configuration)
# ✅ Storage configuration (2TB drives, /data directory structure)
#
# Next steps:
# 1. Verify Docker is working: docker --version, docker compose version
# 2. Test Docker functionality: docker run hello-world
# 3. Verify homelab network exists: docker network ls
# 4. Proceed to Phase 2: Core Services (deploy-traefik.yml)
#
# ============================================================================= 