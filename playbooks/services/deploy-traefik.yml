---
# =============================================================================
# PHASE 2: Core Services - Traefik Reverse Proxy Deployment
# =============================================================================
# 
# This playbook deploys Traefik reverse proxy with SSL automation, creating
# the foundation for all other web services in your homelab.
#
# Prerequisites:
# - Phase 1 infrastructure setup completed
# - DNS overrides configured in OPNsense
# - Cloudflare API token configured in vault.yml
# - Docker installed and homelab network created
#
# What this playbook does:
# 1. Creates Traefik configuration directories
# 2. Deploys Traefik Docker Compose stack with SSL automation
# 3. Configures Let's Encrypt certificates via Cloudflare DNS
# 4. Deploys whoami test service for SSL verification
# 5. Verifies service deployment and SSL functionality
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing SSL certificates
# - Handles configuration updates gracefully
# - Works with existing Portainer deployments
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-traefik.yml --ask-vault-pass
#
# Tags:
# --tags setup    : Only create directories and configuration
# --tags deploy   : Only deploy/update the service
# --tags verify   : Only run verification checks
# --tags update   : Force update and restart service
# =============================================================================

- name: Deploy Traefik Reverse Proxy with SSL Automation
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "traefik"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    ssl_cert_resolver: "myresolver"
    
  tasks:
    # =============================================================================
    # SETUP: Directory and Configuration Creation
    # =============================================================================
    
    - name: "Setup - Create Traefik directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/acme"
        - "{{ data_directory }}/{{ service_name }}/config"
        - "{{ data_directory }}/{{ service_name }}/logs"
        - "{{ data_directory }}/{{ service_name }}/dynamic"
      tags: 
        - setup
        - always

    - name: "Setup - Create SSL certificate file with proper permissions"
      file:
        path: "{{ data_directory }}/{{ service_name }}/acme/acme.json"
        state: touch
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0600'
      tags: 
        - setup
        - always

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "traefik-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display compose file location"
      debug:
        msg: "Docker Compose file created at: {{ compose_file }}"
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing containers using Traefik ports"
      shell: "docker ps | grep -E ':(80|443|8080)->' || true"
      register: existing_port_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Display existing containers using Traefik ports"
      debug:
        msg: |
          üîç EXISTING CONTAINERS CHECK:
          {% if existing_port_containers.stdout %}
          ‚ö†Ô∏è  Found existing containers using ports 80, 443, or 8080:
          {{ existing_port_containers.stdout }}
          
          üí° Note: These containers may need to be stopped if they conflict with Traefik
          üí° If these are Portainer-managed containers, you may need to stop them manually
          {% else %}
          ‚úÖ No existing containers found using ports 80, 443, or 8080
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        for container in traefik whoami; do
          if docker ps -a -q -f name=^${container}$ | grep -q .; then
            echo "Removing existing container: $container"
            docker stop $container 2>/dev/null || true
            docker rm $container 2>/dev/null || true
          fi
        done
      when: existing_port_containers.stdout != ""
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Display cleanup results"
      debug:
        msg: |
          üßπ CONTAINER CLEANUP:
          {% if cleanup_result.changed %}
          ‚úÖ Stopped and removed conflicting containers
          {{ cleanup_result.stdout }}
          {% else %}
          ‚ÑπÔ∏è  No container cleanup needed
          {% endif %}
      when: existing_port_containers.stdout != ""
      tags: 
        - deploy
        - always

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start Traefik services"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for services to be ready"
      wait_for:
        port: "{{ item }}"
        host: "{{ ubuntu_server_ip }}"
        timeout: 60
      loop:
        - 80    # HTTP
        - 443   # HTTPS
        - 8080  # Traefik Dashboard
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Test Traefik dashboard accessibility"
      uri:
        url: "http://{{ ubuntu_server_ip }}:8080/api/version"
        method: GET
        timeout: 10
      register: dashboard_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test whoami service accessibility"
      uri:
        url: "http://{{ ubuntu_server_ip }}/api/whoami"
        method: GET
        timeout: 10
        headers:
          Host: "whoami.{{ base_domain }}"
      register: whoami_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Check SSL certificate generation (wait up to 2 minutes)"
      wait_for:
        path: "{{ data_directory }}/{{ service_name }}/acme/acme.json"
        search_regex: "certificateUrl"
        timeout: 120
      register: ssl_cert_check
      failed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display SSL certificate status"
      debug:
        msg: |
          SSL Certificate Status:
          {% if ssl_cert_check.failed %}
          ‚ùå SSL certificates not yet generated (this is normal for initial deployment)
          üí° Certificates will be generated automatically when services are accessed via HTTPS
          {% else %}
          ‚úÖ SSL certificates found in acme.json
          {% endif %}
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Deployment results"
      debug:
        msg: |
          ============================================================
          üöÄ TRAEFIK DEPLOYMENT SUMMARY
          ============================================================
          
          üìÅ Service Directory: {{ data_directory }}/{{ service_name }}
          üìã Compose File: {{ compose_file }}
          üîß SSL Certificate Resolver: {{ ssl_cert_resolver }}
          
          üåê Service Access URLs:
          ‚Ä¢ Traefik Dashboard: http://{{ ubuntu_server_ip }}:8080
          ‚Ä¢ Traefik Dashboard (SSL): https://traefik.{{ base_domain }}
          ‚Ä¢ Whoami Test Service: https://whoami.{{ base_domain }}
          
          üìä Service Status:
          {% if dashboard_test is defined and whoami_test is defined and ssl_cert_check is defined %}
          ‚Ä¢ Dashboard API: {{ '‚úÖ Accessible' if dashboard_test.status == 200 else '‚ùå Not accessible' }}
          ‚Ä¢ Whoami Service: {{ '‚úÖ Accessible' if whoami_test.status == 200 else '‚ùå Not accessible' }}
          ‚Ä¢ SSL Certificates: {{ '‚úÖ Generated' if not ssl_cert_check.failed else 'üîÑ Generating...' }}
          {% else %}
          ‚Ä¢ Service verification: ‚è≥ Run with --tags verify to check service status
          {% endif %}
          
          üîß Service Management Commands:
          ‚Ä¢ View logs: docker compose -f {{ compose_file }} logs -f
          ‚Ä¢ Restart: docker compose -f {{ compose_file }} restart
          ‚Ä¢ Stop: docker compose -f {{ compose_file }} down
          ‚Ä¢ Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          üìù Next Steps:
          1. Access Traefik dashboard at http://{{ ubuntu_server_ip }}:8080
          2. Test SSL access at https://traefik.{{ base_domain }}
          3. Verify whoami service at https://whoami.{{ base_domain }}
          4. SSL certificates will generate automatically on first HTTPS access
          
          ‚ö†Ô∏è  SSL Certificate Notes:
          ‚Ä¢ Initial certificate generation may take 1-2 minutes
          ‚Ä¢ If certificates don't generate, check Cloudflare API token
          ‚Ä¢ Use 'openssl s_client -connect traefik.{{ base_domain }}:443' to test SSL
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          üí° USEFUL COMMANDS:
          
          # Check service status
          docker compose -f {{ compose_file }} ps
          
          # View logs
          docker compose -f {{ compose_file }} logs -f traefik
          
          # Restart service
          docker compose -f {{ compose_file }} restart
          
          # Force SSL certificate regeneration
          sudo rm {{ data_directory }}/{{ service_name }}/acme/acme.json
          sudo touch {{ data_directory }}/{{ service_name }}/acme/acme.json
          sudo chmod 600 {{ data_directory }}/{{ service_name }}/acme/acme.json
          docker compose -f {{ compose_file }} restart traefik
          
          # Test SSL certificate
          openssl s_client -connect traefik.{{ base_domain }}:443 -servername traefik.{{ base_domain }}
      tags: 
        - always 