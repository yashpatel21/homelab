---
# =============================================================================
# PHASE 3: Supporting Services - Watchtower Automatic Updates Deployment
# =============================================================================
# 
# This playbook deploys Watchtower for automatic Docker container updates
# with NTFY notification integration and selective update management.
#
# Prerequisites:
# - Phase 1 infrastructure setup completed
# - Phase 2 core services deployed (Traefik, NTFY, AdGuard Home)
# - Docker installed and homelab network created
# - NTFY service operational for update notifications
# - Containers properly labeled for selective updates
#
# What this playbook does:
# 1. Deploys Watchtower Docker Compose stack
# 2. Configures automatic update scheduling (daily at 4 AM)
# 3. Sets up NTFY notification integration for update reports
# 4. Enables selective container update management via labels
# 5. Verifies service deployment and notification functionality
#
# Idempotent Design:
# - Safe to run multiple times
# - Handles configuration updates gracefully
# - Works with existing Watchtower deployments
# - Preserves update schedules and settings
#
# Manual Configuration Required:
# - Verify container labels for selective updates
# - Monitor update logs and notifications
# - Test notification delivery via NTFY
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-watchtower.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and configuration
# --tags deploy     : Only deploy/update the service
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart service
# =============================================================================

- name: Deploy Watchtower Automatic Updates
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "watchtower"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    
  tasks:
    # =============================================================================
    # SETUP: Configuration Creation
    # =============================================================================
    
    - name: "Setup - Ensure compose directory exists"
      file:
        path: "{{ data_directory }}/compose"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      tags: 
        - setup
        - always

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "watchtower-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Display compose file location"
      debug:
        msg: "Docker Compose file created at: {{ compose_file }}"
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing Watchtower containers"
      shell: "docker ps -a | grep watchtower || true"
      register: existing_watchtower_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Display existing Watchtower containers"
      debug:
        msg: |
          üîç EXISTING WATCHTOWER CONTAINERS CHECK:
          {% if existing_watchtower_containers.stdout %}
          ‚ö†Ô∏è  Found existing Watchtower containers:
          {{ existing_watchtower_containers.stdout }}
          
          üí° Note: Will be managed by Ansible if names match
          {% else %}
          ‚úÖ No existing Watchtower containers found
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        if docker ps -a -q -f name=^watchtower$ | grep -q .; then
          echo "Removing existing container: watchtower"
          docker stop watchtower 2>/dev/null || true
          docker rm watchtower 2>/dev/null || true
        fi
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start Watchtower service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for Watchtower service to initialize"
      pause:
        seconds: 10
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Check Watchtower logs"
      shell: "docker logs watchtower | tail -20"
      register: watchtower_logs
      changed_when: false
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display recent logs"
      debug:
        msg: |
          üìã RECENT WATCHTOWER LOGS:
          {{ watchtower_logs.stdout_lines | join('\n') }}
      tags: 
        - verify
        - always

    - name: "Verify - Test NTFY notification connectivity"
      uri:
        url: "https://ntfy.{{ base_domain }}/homelab-updates"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_ntfy_token }}"
          Title: "Watchtower Deployment Test"
        body: "Watchtower has been deployed successfully via Ansible"
        timeout: 10
        validate_certs: false
        status_code: [200, 202]
      register: ntfy_test_result
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Display NTFY test results"
      debug:
        msg: |
          üì° NTFY NOTIFICATION TEST RESULTS:
          
          ‚Ä¢ NTFY Connectivity: {{ '‚úÖ Success' if ntfy_test_result.status in [200, 202] else '‚ùå Failed (' + (ntfy_test_result.status | string) + ')' }}
          ‚Ä¢ Test notification sent to homelab-updates channel
          
          üí° Note: Check your NTFY client for the test notification
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          ‚ö° WATCHTOWER DEPLOYMENT SUMMARY
          ============================================================
          
          üìã Compose File: {{ compose_file }}
          ‚è∞ Update Schedule: Daily at 4:00 AM (0 0 4 * * *)
          üì° NTFY Channel: homelab-updates
          
          üîß Update Configuration:
          ‚Ä¢ Label-based updates: Only containers with com.centurylinklabs.watchtower.enable=true
          ‚Ä¢ Cleanup: Removes old images automatically
          ‚Ä¢ Rolling restart: Minimizes service disruption
          ‚Ä¢ Notifications: Update reports sent to NTFY
          
          üìä Service Status:
          ‚Ä¢ Container Status: {{ 'Running' if running_containers.stdout else 'Starting' }}
          ‚Ä¢ NTFY Integration: {{ '‚úÖ Working' if ntfy_test_result.status in [200, 202] else '‚ùå Check configuration' }}
          
          üîß Service Management Commands:
          ‚Ä¢ View logs: docker compose -f {{ compose_file }} logs -f
          ‚Ä¢ Check updates: docker logs watchtower | grep -i "update\|pulling"
          ‚Ä¢ Restart: docker compose -f {{ compose_file }} restart
          ‚Ä¢ Stop: docker compose -f {{ compose_file }} down
          
          üìù Manual Tasks Required:
          1. **Verify Container Labels**: Ensure containers have watchtower.enable=true label
          2. **Monitor First Update**: Watch logs during first scheduled update cycle
          3. **Test Notifications**: Verify NTFY alerts are received properly
          4. **Update Management**: Monitor update success and handle any failures
          
          üöÄ Next Steps:
          1. Check container labels: docker ps --filter "label=com.centurylinklabs.watchtower.enable=true"
          2. Monitor update logs: docker logs -f watchtower
          3. Verify NTFY notifications are received
          4. Set up monitoring for update failures
          5. Deploy other Phase 3 services as needed (Homarr, Uptime Kuma)
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Container labeling reminder"
      debug:
        msg: |
          üí° CONTAINER LABELING REQUIREMENTS:
          
          For containers to be updated by Watchtower, they must include this label:
          
          labels:
            - "com.centurylinklabs.watchtower.enable=true"
          
          # Check which containers are enabled for updates
          docker ps --filter "label=com.centurylinklabs.watchtower.enable=true"
          
          # View Watchtower activity
          docker logs watchtower | grep -i "update\|pulling\|updated"
          
          # Test immediate update check (manual)
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            containrrr/watchtower --run-once --cleanup
          
          # Monitor update notifications
          # Check your NTFY client for homelab-updates channel
      tags: 
        - always 