# =============================================================================
# HOMELAB ANSIBLE VAULT TEMPLATE - SENSITIVE CONFIGURATION
# =============================================================================
# 
# 🔒 THIS FILE CONTAINS SENSITIVE DATA PLACEHOLDERS
# 
# INSTRUCTIONS:
# 1. Copy this file to vault.yml: cp vault_template.yml ./all/vault.yml
# 2. Replace all "REPLACE_WITH_YOUR_XXX" placeholders with real values
# 3. Encrypt the file: ansible-vault encrypt vault.yml
#
# =============================================================================

# -----------------------------------------------------------------------------
# CLOUDFLARE API CONFIGURATION
# -----------------------------------------------------------------------------
# Used by Traefik for Let's Encrypt DNS challenges

vault_cloudflare_api_token: "REPLACE_WITH_YOUR_CLOUDFLARE_API_TOKEN"
vault_cloudflare_account_id: "REPLACE_WITH_YOUR_CLOUDFLARE_ACCOUNT_ID"
vault_cloudflare_zone_id: "REPLACE_WITH_YOUR_CLOUDFLARE_ZONE_ID"

# How to get these values:
# 1. Go to Cloudflare Dashboard → My Profile → API Tokens
# 2. Create Custom Token with Zone:Zone:Read and Zone:DNS:Edit permissions
# 3. Account ID and Zone ID are found in the right sidebar of your domain overview

# -----------------------------------------------------------------------------
# SSH KEY CONFIGURATION
# -----------------------------------------------------------------------------
# SSH public keys for accessing servers

ssh_public_keys:
  - "REPLACE_WITH_YOUR_SSH_PUBLIC_KEY_1"
  # Add more SSH keys if needed:
  # - "REPLACE_WITH_YOUR_SSH_PUBLIC_KEY_2"

# How to get SSH public key:
# Run: cat ~/.ssh/id_ed25519.pub (or ~/.ssh/id_rsa.pub)
# Copy the entire output starting with ssh-ed25519 or ssh-rsa

# -----------------------------------------------------------------------------
# NTFY CONFIGURATION
# -----------------------------------------------------------------------------
# Authentication token for NTFY notification service

vault_ntfy_token: "PLACEHOLDER_TOKEN"

# NTFY user passwords for authentication setup
vault_ntfy_admin_password: "REPLACE_WITH_YOUR_NTFY_ADMIN_PASSWORD"
vault_ntfy_monitor_password: "REPLACE_WITH_YOUR_NTFY_MONITOR_PASSWORD"
vault_ntfy_reader_password: "REPLACE_WITH_YOUR_NTFY_READER_PASSWORD"

# How to get NTFY token:
# 1. Run the NTFY deployment playbook first (it will generate a token automatically)
# 2. Copy the displayed token and add it here
# 3. Re-run the playbook to deploy scripts with the vault token
# Manual generation: docker exec ntfy ntfy token add homelab-monitor

# -----------------------------------------------------------------------------
# PROXMOX API CONFIGURATION
# -----------------------------------------------------------------------------
# For Homarr dashboard integration with Proxmox hardware monitoring

vault_proxmox_api_token: "REPLACE_WITH_YOUR_PROXMOX_API_TOKEN"

# How to get Proxmox API token for Homarr:
# 1. Follow: https://homarr.dev/docs/integrations/hardware/

# -----------------------------------------------------------------------------
# HOMARR CONFIGURATION
# -----------------------------------------------------------------------------
# Encryption key for Homarr dashboard secure data storage

vault_homarr_encryption_key: "REPLACE_WITH_YOUR_HOMARR_ENCRYPTION_KEY"

# How to generate Homarr encryption key:
# Run: openssl rand -hex 32
# Copy the entire 64-character hex string output

# -----------------------------------------------------------------------------
# ADGUARD HOME MONITORING CONFIGURATION
# -----------------------------------------------------------------------------
# Dedicated monitoring user credentials for AdGuard Home Prometheus monitoring
# These credentials will be automatically created in AdGuard Home config

vault_adguard_monitoring_username: "monitoring"
vault_adguard_monitoring_password: "REPLACE_WITH_SECURE_MONITORING_PASSWORD"

# How monitoring user works:
# The Prometheus + Grafana playbook automatically creates this monitoring user
# It uses bcrypt password hashing for security and has limited access for metrics collection
# This provides better security isolation from your admin user

# -----------------------------------------------------------------------------
# GRAFANA CONFIGURATION
# -----------------------------------------------------------------------------
# Grafana admin password and secret key for dashboard security

vault_grafana_admin_password: "REPLACE_WITH_YOUR_GRAFANA_ADMIN_PASSWORD"
vault_grafana_secret_key: "REPLACE_WITH_YOUR_GRAFANA_SECRET_KEY"

# How to generate Grafana secret key:
# Run: openssl rand -base64 32
# Copy the entire base64 string output

# -----------------------------------------------------------------------------
# UPTIME KUMA CONFIGURATION
# -----------------------------------------------------------------------------
# Admin password for Uptime Kuma Prometheus metrics endpoint

vault_uptime_kuma_admin_password: "REPLACE_WITH_YOUR_UPTIME_KUMA_ADMIN_PASSWORD"

# This is the same password you use to login to Uptime Kuma web interface
# Used by Prometheus to authenticate when scraping /metrics endpoint

# -----------------------------------------------------------------------------
# OPNSENSE API CONFIGURATION
# -----------------------------------------------------------------------------
# API key and secret for OPNsense exporter to access firewall metrics

vault_opnsense_api_key: "REPLACE_WITH_YOUR_OPNSENSE_API_KEY"
vault_opnsense_api_secret: "REPLACE_WITH_YOUR_OPNSENSE_API_SECRET"

# How to get OPNsense API credentials:
# 1. Login to OPNsense web interface (https://router.radiowaves.app)
# 2. Go to System → Access → Users
# 3. Click "Create and download API key for this user"
# 4. Copy the generated key and secret
# 5. Add to vault: `ansible-vault edit inventory/group_vars/all/vault.yml`

# -----------------------------------------------------------------------------
# NEXTCLOUD AIO CONFIGURATION
# -----------------------------------------------------------------------------
# Credentials and passwords for Nextcloud All-in-One platform

vault_nextcloud_aio_passphrase: "REPLACE_WITH_YOUR_AIO_PASSPHRASE"
vault_nextcloud_borg_backup_password: "REPLACE_WITH_YOUR_BORG_BACKUP_PASSWORD"

# How to get these values:
# 1. AIO Passphrase:
#    - Deploy Nextcloud AIO using the playbook
#    - Access http://192.168.1.20:9080 for initial setup
#    - Copy the auto-generated passphrase displayed on first visit
#    - This passphrase is needed to access the AIO admin interface
#
# 2. Borg Backup Password:
#    - Complete initial Nextcloud AIO setup via the admin interface
#    - Go to "Backup and restore" section in AIO admin
#    - Copy the auto-generated Borg backup encryption password
#    - This password encrypts/decrypts Nextcloud backups
#
# Security Notes:
# - Store these passwords safely - losing them means losing access to data
# - AIO passphrase: Required for AIO admin access and container management
# - Borg password: Required for backup restoration - backup immediately after setup

# -----------------------------------------------------------------------------
# CONVERTX CONFIGURATION
# -----------------------------------------------------------------------------
# JWT secret for ConvertX file conversion service authentication

vault_convertx_jwt_secret: "REPLACE_WITH_YOUR_CONVERTX_JWT_SECRET"

# How to generate ConvertX JWT secret:
# Run: openssl rand -base64 64
# Copy the entire base64 string output
# This secret is used to sign JSON Web Tokens for user authentication

# -----------------------------------------------------------------------------
# EMAIL CONFIGURATION
# -----------------------------------------------------------------------------
# Your email for Let's Encrypt certificates

vault_letsencrypt_email: "REPLACE_WITH_YOUR_EMAIL@example.com"

# -----------------------------------------------------------------------------
# VPS/HOST CREDENTIALS
# -----------------------------------------------------------------------------
# Sensitive host connection information for external VPS servers

# Pangolin VPS connection details
vault_pangolin_vps_ip: "REPLACE_WITH_YOUR_PANGOLIN_VPS_IP"
vault_pangolin_vps_user: "REPLACE_WITH_YOUR_PANGOLIN_VPS_USERNAME"
vault_pangolin_vps_password: "REPLACE_WITH_YOUR_PANGOLIN_VPS_PASSWORD"

# How to get VPS credentials:
# 1. IP Address: The public IP address provided by your VPS provider
# 2. Username: Usually "root", "ubuntu", or a custom user you created
# 3. Password: The password for SSH authentication (consider using SSH keys instead)
#
# Security Note: For better security, set up SSH key authentication:
# 1. Generate SSH key (if not already done): ssh-keygen -t ed25519 -C "my-email@example.com"
# 2. Copy to VPS: ssh-copy-id user@vps-ip

# -----------------------------------------------------------------------------
# PANGOLIN TUNNELING CONFIGURATION
# -----------------------------------------------------------------------------
# Newt client credentials for connecting to Pangolin server

vault_pangolin_endpoint: "REPLACE_WITH_YOUR_PANGOLIN_ENDPOINT"
vault_newt_id: "REPLACE_WITH_YOUR_NEWT_ID"
vault_newt_secret: "REPLACE_WITH_YOUR_NEWT_SECRET"

# How to get Pangolin tunneling credentials:
# 1. Pangolin Endpoint: The URL of your Pangolin server
# 2. Newt ID: Client identifier provided by Pangolin server setup
# 3. Newt Secret: Client authentication secret provided by Pangolin server setup
#
# These credentials are generated during manual Pangolin server setup

# -----------------------------------------------------------------------------
# CROWDSEC SECURITY CONFIGURATION
# -----------------------------------------------------------------------------
# Cloudflare Turnstile credentials for CrowdSec captcha protection

vault_turnstile_site_key: "REPLACE_WITH_YOUR_TURNSTILE_SITE_KEY"
vault_turnstile_secret_key: "REPLACE_WITH_YOUR_TURNSTILE_SECRET_KEY"

# How to get Cloudflare Turnstile credentials:
# 1. Go to Cloudflare Dashboard → Turnstile
# 2. Create a new site with these settings:
#    - Site name: "Homelab CrowdSec Protection"
#    - Domain: radiowaves.app (or your domain)
#    - Widget type: "Non-Interactive" (IMPORTANT: Must be Non-Interactive)
# 3. Copy the Site Key and Secret Key
# 4. These keys enable captcha challenges for suspicious traffic detected by CrowdSec
#
# Security Note: Non-Interactive mode is required for CrowdSec integration
# This provides automatic captcha challenges without user interaction for legitimate traffic

# -----------------------------------------------------------------------------
# AUTHENTIK SSO CONFIGURATION
# -----------------------------------------------------------------------------
# Authentication infrastructure for enterprise-grade SSO across all homelab services

# AdGuard Home admin credentials for header injection middleware
vault_adguard_admin_username: "admin"
vault_adguard_admin_password: "REPLACE_WITH_YOUR_ADGUARD_ADMIN_PASSWORD"

# How to get AdGuard Home admin credentials:
# These should match your current AdGuard Home admin login credentials
# 1. Use the same username/password you currently use to login to AdGuard Home
# 2. If you've forgotten, you can reset them via AdGuard Home interface
# 3. These credentials will be used for header injection authentication
# Note: A separate monitoring user is already configured for Prometheus

# Authentik infrastructure secrets
vault_authentik_postgres_password: "REPLACE_WITH_SECURE_POSTGRES_PASSWORD"
vault_authentik_secret_key: "REPLACE_WITH_60_CHAR_SECRET_KEY"

# How to generate Authentik secrets:
# 1. PostgreSQL password: Use a strong password (20+ characters)
#    Example: openssl rand -base64 32
# 2. Secret key: Must be exactly 50+ characters for security
#    Example: python3 -c 'import secrets; print(secrets.token_hex(32))'
# Note: Admin user/password will be set manually via https://auth.radiowaves.app/if/flow/initial-setup/

# Authentik email configuration for password recovery and notifications
vault_authentik_email_host: "REPLACE_WITH_YOUR_EMAIL_HOST"
vault_authentik_email_port: "REPLACE_WITH_YOUR_EMAIL_PORT"
vault_authentik_email_username: "REPLACE_WITH_YOUR_EMAIL_USERNAME"
vault_authentik_email_password: "REPLACE_WITH_YOUR_EMAIL_PASSWORD"

# Authentik OIDC client credentials
vault_authentik_grafana_client_id: "grafana"
vault_authentik_grafana_client_secret: "REPLACE_WITH_GRAFANA_OIDC_SECRET"
vault_authentik_homarr_client_id: "homarr"
vault_authentik_homarr_client_secret: "REPLACE_WITH_HOMARR_OIDC_SECRET"
vault_authentik_nextcloud_client_id: "nextcloud"
vault_authentik_nextcloud_client_secret: "REPLACE_WITH_NEXTCLOUD_OIDC_SECRET"

# How to generate OIDC client secrets:
# Run: openssl rand -base64 48
# Generate a unique secret for each service
# These will be configured in Authentik web interface during setup
# Keep these secrets secure - they authenticate your services to Authentik

# =============================================================================
# EXAMPLE COMPLETED VAULT FILE
# =============================================================================
#
# Here's what the completed vault.yml should look like (with real values):
#
# vault_cloudflare_api_token: "your-cloudflare-api-token"
# vault_cloudflare_account_id: "your-cloudflare-account-id"
# vault_cloudflare_zone_id: "your-cloudflare-zone-id"
# ssh_public_keys:
#   - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... user@laptop"
# vault_ntfy_token: "your-ntfy-token"
# vault_ntfy_admin_password: "your-secure-admin-password"
# vault_ntfy_monitor_password: "your-secure-monitor-password"
# vault_ntfy_reader_password: "your-secure-reader-password"
# vault_proxmox_api_token: "your-proxmox-api-token"
# vault_homarr_encryption_key: "abc123def456789abcdef123456789abcdef123456789abcdef123456789abc"
# vault_adguard_monitoring_username: "your-monitoring-username"
# vault_adguard_monitoring_password: "your-secure-monitoring-password"
# vault_grafana_admin_password: "your-secure-grafana-password"
# vault_grafana_secret_key: "your-base64-encoded-secret-key"
# vault_opnsense_api_key: "your-opnsense-api-key"
# vault_opnsense_api_secret: "your-opnsense-api-secret"
# vault_nextcloud_aio_passphrase: "your-aio-passphrase-from-initial-setup"
# vault_nextcloud_borg_backup_password: "your-borg-backup-encryption-password"
# vault_convertx_jwt_secret: "your-base64-encoded-jwt-secret"
# vault_letsencrypt_email: "your-email@example.com"
# vault_pangolin_vps_ip: "your-pangolin-vps-ip"
# vault_pangolin_vps_user: "your-pangolin-vps-user"
# vault_pangolin_vps_password: "your-secure-vps-password"
# vault_pangolin_endpoint: "your-pangolin-endpoint"
# vault_newt_id: "your-newt-id"
# vault_newt_secret: "your-newt-secret"
# vault_turnstile_site_key: "your-turnstile-site-key"
# vault_turnstile_secret_key: "your-turnstile-secret-key"
# vault_adguard_admin_username: "your-adguard-admin-username"
# vault_adguard_admin_password: "your-current-adguard-admin-password"
# vault_authentik_postgres_password: "your-secure-postgres-password"
# vault_authentik_secret_key: "your-64-character-hex-secret-key"
# vault_authentik_email_host: "your-email-host"
# vault_authentik_email_port: "your-email-port"
# vault_authentik_email_username: "your-email-username"
# vault_authentik_email_password: "your-email-password"
# vault_authentik_grafana_client_id: "your-grafana-client-id"
# vault_authentik_grafana_client_secret: "your-base64-grafana-oidc-secret"
# vault_authentik_homarr_client_id: "your-homarr-client-id"
# vault_authentik_homarr_client_secret: "your-base64-homarr-oidc-secret"
# vault_authentik_nextcloud_client_id: "your-nextcloud-client-id"
# vault_authentik_nextcloud_client_secret: "your-base64-nextcloud-oidc-secret"
#
# =============================================================================

# -----------------------------------------------------------------------------
# SECURITY REMINDERS
# -----------------------------------------------------------------------------
#
# ✅ DO:
# - Keep vault.yml encrypted at all times
# - Use strong, unique passwords
# - Rotate API tokens regularly
# - Backup vault password securely
#
# ❌ DON'T:
# - Commit unencrypted vault.yml to git
#
# ============================================================================= 