---
# =============================================================================
# PHASE 4: Family Services - Nextcloud All-in-One Platform Deployment
# =============================================================================
# 
# This playbook deploys Nextcloud All-in-One (AIO) platform for file
# synchronization, collaboration, and family productivity services.
#
# Prerequisites:
# - Phase 1, 2, and 3 completed (infrastructure, core services, supporting services)
# - DNS overrides configured in OPNsense for cloud.radiowaves.app and aio.radiowaves.app
# - Traefik operational with dynamic configuration support
# - Docker installed and homelab network created
# - Sufficient storage space for family file synchronization
#
# What this playbook does:
# 1. Creates Nextcloud configuration directories
# 2. Deploys Traefik dynamic configuration for Nextcloud routing
# 3. Deploys Nextcloud AIO master container with proper configuration
# 4. Configures persistent volumes with proper permissions
# 5. Verifies service deployment and accessibility
#
# Idempotent Design:
# - Safe to run multiple times
# - Preserves existing Nextcloud configuration and data
# - Handles configuration updates gracefully
# - Works with existing Nextcloud deployments
#
# Manual Configuration Required:
# - Initial AIO setup via web interface at https://aio.radiowaves.app
# - Domain and SSL configuration for cloud.radiowaves.app
# - Admin account creation and security configuration
# - User account management for family members
# - Mobile app configuration for file synchronization
#
# Usage:
# ansible-playbook -i inventory/homelab.yml playbooks/services/deploy-nextcloud.yml --ask-vault-pass
#
# Tags:
# --tags setup      : Only create directories and configuration
# --tags deploy     : Only deploy/update the service
# --tags verify     : Only run verification checks
# --tags update     : Force update and restart service
# =============================================================================

- name: Deploy Nextcloud All-in-One Platform
  hosts: ubuntu_servers
  become: true
  vars:
    service_name: "nextcloud"
    compose_file: "{{ data_directory }}/compose/{{ service_name }}-compose.yml"
    traefik_config_file: "{{ data_directory }}/traefik/dynamic/{{ service_name }}.yml"
    ssl_cert_resolver: "myresolver"
    
  tasks:
    # =============================================================================
    # SETUP: Directory and Configuration Creation
    # =============================================================================
    
    - name: "Setup - Create Nextcloud directories"
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
      loop:
        - "{{ data_directory }}/{{ service_name }}"
        - "{{ data_directory }}/{{ service_name }}/data"
        - "{{ data_directory }}/{{ service_name }}/config"
        - "/storage/{{ service_name }}"
      tags: 
        - setup
        - always

    - name: "Setup - Generate Traefik dynamic configuration for Nextcloud"
      template:
        src: "nextcloud-traefik-config.yml.j2"
        dest: "{{ traefik_config_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: traefik_config_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Generate Docker Compose file from template"
      template:
        src: "nextcloud-compose.yml.j2"
        dest: "{{ compose_file }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0644'
        backup: yes
      register: compose_updated
      tags: 
        - setup
        - deploy
        - update

    - name: "Setup - Set Nextcloud storage directory permissions"
      file:
        path: "/storage/{{ service_name }}"
        owner: "{{ ubuntu_primary_user }}"
        group: "{{ ubuntu_primary_user }}"
        mode: '0755'
        recurse: yes
      tags: 
        - setup
        - always

    - name: "Setup - Display configuration file locations"
      debug:
        msg: |
          üìã NEXTCLOUD CONFIGURATION FILES:
          ‚Ä¢ Docker Compose file: {{ compose_file }}
          ‚Ä¢ Traefik dynamic config: {{ traefik_config_file }}
          ‚Ä¢ Data storage directory: /storage/{{ service_name }}
      tags: 
        - setup
        - always

    # =============================================================================
    # DEPLOY: Service Deployment and Management
    # =============================================================================

    - name: "Deploy - Check for existing Nextcloud containers"
      shell: "docker ps -a | grep nextcloud || true"
      register: existing_nextcloud_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check for port 9080 conflicts"
      shell: "docker ps | grep ':9080->' || true"
      register: port_9080_conflicts
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Display existing containers and port conflicts"
      debug:
        msg: |
          üîç NEXTCLOUD DEPLOYMENT CHECK:
          
          {% if existing_nextcloud_containers.stdout %}
          ‚ö†Ô∏è  Existing Nextcloud containers found:
          {{ existing_nextcloud_containers.stdout }}
          {% else %}
          ‚úÖ No existing Nextcloud containers found
          {% endif %}
          
          {% if port_9080_conflicts.stdout %}
          ‚ö†Ô∏è  Port 9080 conflict detected:
          {{ port_9080_conflicts.stdout }}
          üí° These containers may need to be stopped before deployment
          {% else %}
          ‚úÖ Port 9080 is available for Nextcloud AIO
          {% endif %}
      tags: 
        - deploy
        - verify
        - always

    - name: "Deploy - Check if containers are already running"
      command: "docker compose -f {{ compose_file }} ps -q"
      register: running_containers
      changed_when: false
      failed_when: false
      tags: 
        - deploy
        - verify

    - name: "Deploy - Stop existing containers (if update requested)"
      command: "docker compose -f {{ compose_file }} down"
      when: 
        - running_containers.stdout != ""
        - "'update' in ansible_run_tags"
      tags: 
        - deploy
        - update

    - name: "Deploy - Remove conflicting containers (automatic cleanup)"
      shell: |
        # Remove containers with conflicting names (including stopped ones)
        if docker ps -a -q -f name=^nextcloud-aio-mastercontainer$ | grep -q .; then
          echo "Removing existing container: nextcloud-aio-mastercontainer"
          docker stop nextcloud-aio-mastercontainer 2>/dev/null || true
          docker rm nextcloud-aio-mastercontainer 2>/dev/null || true
        fi
      register: cleanup_result
      changed_when: "'Removing existing container' in cleanup_result.stdout"
      tags: 
        - deploy

    - name: "Deploy - Pull latest container images"
      command: "docker compose -f {{ compose_file }} pull"
      register: pull_result
      changed_when: "'Downloaded newer image' in pull_result.stdout"
      tags: 
        - deploy
        - update

    - name: "Deploy - Start Nextcloud AIO service"
      command: "docker compose -f {{ compose_file }} up -d"
      register: deploy_result
      changed_when: "'Started' in deploy_result.stderr or 'Created' in deploy_result.stderr"
      tags: 
        - deploy
        - update

    - name: "Deploy - Wait for Nextcloud AIO to be ready"
      wait_for:
        port: 9080
        host: "{{ ubuntu_server_ip }}"
        timeout: 120
      tags: 
        - deploy
        - verify

    # =============================================================================
    # VERIFY: Service Verification and Health Checks
    # =============================================================================

    - name: "Verify - Check container status"
      command: "docker compose -f {{ compose_file }} ps"
      register: container_status
      changed_when: false
      tags: 
        - verify
        - always

    - name: "Verify - Display container status"
      debug:
        msg: "{{ container_status.stdout_lines }}"
      tags: 
        - verify
        - always

    - name: "Verify - Test Nextcloud AIO direct access"
      uri:
        url: "http://{{ ubuntu_server_ip }}:9080"
        method: GET
        timeout: 10
      register: direct_access_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Test Nextcloud AIO via Traefik (if SSL configured)"
      uri:
        url: "https://aio.{{ base_domain }}"
        method: GET
        timeout: 10
        validate_certs: false
        status_code: [200, 302]
      register: traefik_aio_test
      failed_when: false
      tags: 
        - verify

    - name: "Verify - Check Traefik dynamic configuration"
      stat:
        path: "{{ traefik_config_file }}"
      register: traefik_config_check
      tags: 
        - verify
        - always

    - name: "Verify - Display access test results"
      debug:
        msg: |
          üì° NEXTCLOUD AIO ACCESS TEST RESULTS:
          
          {% if direct_access_test is defined %}
          ‚Ä¢ Direct Access (Port 9080): {{ '‚úÖ Success' if direct_access_test.status == 200 else '‚ùå Failed (' + (direct_access_test.status | string) + ')' }}
          {% endif %}
          
          {% if traefik_aio_test is defined %}
          ‚Ä¢ Traefik Access (HTTPS): {{ '‚úÖ Success' if traefik_aio_test.status in [200, 302] else '‚ùå Failed (' + (traefik_aio_test.status | string) + ')' }}
          {% else %}
          ‚Ä¢ Traefik Access: ‚è≥ SSL certificates may take 1-2 minutes to generate
          {% endif %}
          
          {% if traefik_config_check.stat.exists %}
          ‚Ä¢ Traefik Config: ‚úÖ Dynamic configuration deployed
          {% else %}
          ‚Ä¢ Traefik Config: ‚ùå Dynamic configuration missing
          {% endif %}
          
          üí° Note: Initial AIO setup required at https://aio.{{ base_domain }} or http://{{ ubuntu_server_ip }}:9080
      tags: 
        - verify
        - always

    # =============================================================================
    # SUMMARY: Deployment Summary and Next Steps
    # =============================================================================

    - name: "Summary - Final deployment summary"
      debug:
        msg: |
          ============================================================
          üìÅ NEXTCLOUD ALL-IN-ONE DEPLOYMENT SUMMARY
          ============================================================
          
          üìÅ Service Directory: {{ data_directory }}/{{ service_name }}
          üìã Compose File: {{ compose_file }}
          üîß Traefik Config: {{ traefik_config_file }}
          üîß SSL Certificate Resolver: {{ ssl_cert_resolver }}
          
          üåê Service Access URLs:
          ‚Ä¢ AIO Admin Interface: https://aio.{{ base_domain }}
          ‚Ä¢ AIO Direct Access: http://{{ ubuntu_server_ip }}:9080
          ‚Ä¢ Future Nextcloud Instance: https://cloud.{{ base_domain }} (after AIO setup)
          
          üìä Service Status:
          {% if direct_access_test is defined and traefik_aio_test is defined and traefik_config_check is defined %}
          ‚Ä¢ Direct Access: {{ '‚úÖ Accessible' if direct_access_test.status == 200 else '‚ùå Not accessible' }}
          ‚Ä¢ Traefik Access: {{ '‚úÖ Accessible' if traefik_aio_test.status in [200, 302] else '‚ùå Not accessible' }}
          ‚Ä¢ Dynamic Config: {{ '‚úÖ Deployed' if traefik_config_check.stat.exists else '‚ùå Missing' }}
          {% else %}
          ‚Ä¢ Service verification: ‚è≥ Run with --tags verify to check service status
          {% endif %}
          
          üîß Service Management Commands:
          ‚Ä¢ View logs: docker compose -f {{ compose_file }} logs -f
          ‚Ä¢ Restart: docker compose -f {{ compose_file }} restart
          ‚Ä¢ Stop: docker compose -f {{ compose_file }} down
          ‚Ä¢ Update: docker compose -f {{ compose_file }} pull && docker compose -f {{ compose_file }} up -d
          
          üìù Manual Configuration Required:
          1. **Initial AIO Setup**: Access https://aio.{{ base_domain }} and complete setup wizard
          2. **Domain Configuration**: Configure cloud.{{ base_domain }} as main domain
          3. **SSL Setup**: Enable SSL and verify certificate generation
          4. **Admin Account**: Create initial admin account with strong password
          5. **Storage Configuration**: Configure data storage and backup settings
          6. **Family Users**: Create user accounts for family members
          
          üöÄ Next Steps:
          1. Access AIO admin interface at https://aio.{{ base_domain }}
          2. Complete initial setup wizard and domain configuration
          3. Start and configure Nextcloud instance
          4. Create family user accounts
          5. Install mobile apps and configure synchronization
          6. Set up regular backup routines
          
          ‚ö†Ô∏è  Important Notes:
          ‚Ä¢ Nextcloud requires significant storage space for family files
          ‚Ä¢ Initial setup may take 5-10 minutes for all containers to start
          ‚Ä¢ SSL certificates for cloud.{{ base_domain }} will generate during AIO setup
          ‚Ä¢ Consider regular backups of Nextcloud data and configuration
          
          ============================================================
      tags: 
        - always

    - name: "Summary - Service management reminder"
      debug:
        msg: |
          üí° USEFUL COMMANDS:
          
          # Check service status
          docker compose -f {{ compose_file }} ps
          
          # View logs
          docker compose -f {{ compose_file }} logs -f nextcloud-aio-mastercontainer
          
          # Access AIO admin interface
          https://aio.{{ base_domain }}
          
          # Direct access (if needed)
          http://{{ ubuntu_server_ip }}:9080
          
          # Check all Nextcloud containers (after AIO deployment)
          docker ps | grep nextcloud
          
          # Monitor storage usage
          df -h /storage/nextcloud
          df -h /data/nextcloud
          
          # Check Traefik dynamic config
          cat {{ traefik_config_file }}
          
          # Test DNS resolution
          nslookup aio.{{ base_domain }}
          nslookup cloud.{{ base_domain }}
      tags: 
        - always 